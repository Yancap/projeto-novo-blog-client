import Head from 'next/head'
import Image from 'next/image'
import { Main } from '@/components/Main/index'
import { Box, Icon, Flex, Heading, Stack, Text } from '@chakra-ui/react'
import { HeaderArticlesPage } from '@/components/ArticlesPage/HeaderArticlesPage'
import { CardContainer } from '@/components/ArticlesPage/CardContainer'
import { Card } from '@/components/ArticlesPage/Card'
import { MdMonitor, MdColorLens } from 'react-icons/md'
import { TbAtom2Filled } from 'react-icons/tb'
import { FaMobileAlt } from 'react-icons/fa'
import { GiArtificialIntelligence } from 'react-icons/gi'
import { LuServerCog } from 'react-icons/lu'
import { GetServerSideProps } from 'next'
import { api } from '@/services/api'
import { useQuery } from "react-query";
import { api_client } from '@/services/api_client'
import { AllArticlesResponse, Article, CategoriesResponse } from './article'
import { useRequest } from '@/context/RequestContext'
import { useEffect } from 'react'
import { getServerSession } from 'next-auth'

import { authOptions } from '../api/auth/[...nextauth]'

export interface ArticlesResponse {
  slug: string;
  title: string;
  subtitle: string;
  text: string;
  image: string;
  category: string;
  author: string;
  created_at: string;
  state: string;
}
interface IndexProps{
  categories: {
    id: string;
    category: string;
  }[],
  articlesFrontEnd: Article[];
  articlesBackEnd: Article[];
  articlesMobile: Article[];
  articlesFullstack: Article[];
  articlesIA: Article[];
  articlesDataScience: Article[];
  weekArticles: Article[]
}

export default function Index({
  categories, 
  articlesFrontEnd, 
  articlesBackEnd,
  articlesMobile,
  articlesFullstack,
  articlesIA,
  articlesDataScience,
  weekArticles
}: IndexProps) {
  
  const { setCategories } = useRequest()
  

  useEffect(() => {
    setCategories(categories)
  }, [])
  return (
    <>
      <Head>
        <title>Artigos | ARTech</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main headerComponent={<HeaderArticlesPage articles={weekArticles}/>}>
        <Stack px="10" spacing="8">
          <Heading as="h2" fontSize={{ base: "2.5rem","2xl":"3rem" }}fontWeight="black" mb="4">
              CATEGORIAS
              <Text as="strong" fontWeight="black" color="purple.700">!</Text>
          </Heading>
          {articlesFrontEnd.length > 0 && 
            <Box>
              <Flex color="purple.300" align="center" gap="2">
                <Icon as={MdMonitor} fontSize="2.25rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                  FRONT-END
                </Heading>
              </Flex>
              <CardContainer articles={articlesFrontEnd}/>
            </Box>
          }

          { articlesBackEnd.length > 0 && 
            <Box>
              <Flex color="red.500" align="center" gap="2">
                <Icon as={LuServerCog} fontSize="2.25rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                    BACK-END
                </Heading>
              </Flex>
              <CardContainer articles={articlesBackEnd}/>

            </Box>
          }
          {articlesMobile.length > 0 && 
            <Box>
              <Flex color="yellow.500" align="center" gap="2">
                <Icon as={FaMobileAlt} fontSize="2.25rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                    MOBILE
                </Heading>
              </Flex>
              <CardContainer articles={articlesMobile}/>
            </Box>
          }

          { articlesFullstack.length > 0 &&
            <Box>
              <Flex color="pink.500" align="center" gap="2">
                <Icon as={MdColorLens} fontSize="2.5rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                    FULLSTACK
                </Heading>
              </Flex>
              <CardContainer articles={articlesFullstack}/>
            </Box>
          }

          { articlesIA.length > 0 &&
            <Box>
              <Flex color="blue.500" align="center" gap="2">
                <Icon as={GiArtificialIntelligence} fontSize="2.5rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                    INTELIGENCIA ARTIFICIAL
                </Heading>
              </Flex>
              <CardContainer articles={articlesIA}/>
            </Box>
          }
          { articlesDataScience.length > 0 &&
            <Box>
              <Flex color="green.500" align="center" gap="2">
                <Icon as={TbAtom2Filled} fontSize="2.5rem"/>
                <Heading as="h3"  fontSize="2.25rem" fontFamily="Ubuntu">
                    DATA SCIENCE
                </Heading>
              </Flex>
              <CardContainer articles={articlesDataScience}/>
            </Box>
          }
        </Stack>
      </Main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({req, res, params}) => {
  const {data: temp} = await api_client.get<CategoriesResponse>("categories")
  const session = await getServerSession(req, res, authOptions);
  
  try {
    const { data } = await api_client.get<AllArticlesResponse>("articles/get-all")
    const articlesFrontEnd = data.articles.filter(article => article.category === "front-end")
    const articlesBackEnd = data.articles.filter(article => article.category === "back-end")
    const articlesMobile = data.articles.filter(article => article.category === "mobile")
    const articlesFullstack = data.articles.filter(article => article.category === "fullstack")
    const articlesIA = data.articles.filter(article => article.category === "inteligencia artificial")
    const articlesDataScience = data.articles.filter(article => article.category === "data science")
    const weekArticles = data.articles.slice(0,3)
    return {
      props: {
        articlesFrontEnd,
        articlesBackEnd,
        articlesMobile,
        articlesFullstack,
        articlesIA,
        articlesDataScience,
        weekArticles,
        categories: temp.categories
      }
    }
  } catch (err) {
    console.log(err);
    return {
        props: {
          categories: temp.categories
        }
    }
  }
}